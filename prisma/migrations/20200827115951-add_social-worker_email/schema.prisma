generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url = "***"
}

model Address {
    state    String @id
    zone     String
    district String
    kebele   String
    site     Site
    @@map("address")
}

model Donor {
    id                           Int              @id
    companyName                  String
    typeOfsupport                String?
    initialDonationAmount        Float?
    initialReportPreparationDate DateTime?
    finalReportPreparationDate   DateTime?
    initialDataCollectionDate    DateTime?
    finalDataCollectionDate      DateTime?
    reportDueDate                DateTime?
    groupsOfOrphans              GroupOfOrphans[]
    @@map("donor")
}

model Education {
    id               Int                       @id
    enrollmentStatus educationEnrollmentStatus
    schoolName       String?
    typeOfSchool     educationTypeOfSchool?
    grade            String?
    reason           String?
    hobbies          String?
    orphans          Orphan[]
    @@map("education")
}

model Father {
    id            Int      @id
    dateOfDeath   DateTime
    causeOfDeath  String
    job           String?
    monthlyIncome Int
    dateOfBirth   DateTime
    orphans       Orphan[]
    @@map("father")
}

model GroupOfOrphans {
    id               Int          @id
    registrationDate DateTime
    donorId          Int
    socialWorkerId   Int
    siteId           Int
    donor            Donor        @relation(fields: [donorId], references: [id])
    site             Site         @relation(fields: [siteId], references: [id])
    socialworker     SocialWorker @relation(fields: [socialWorkerId], references: [id])
    orphans          Orphan[]

    @@index([donorId], name: "donorId")
    @@index([siteId], name: "siteId")
    @@index([socialWorkerId], name: "socialWorkerId")
    @@map("groupoforphans")
}

model Guardian {
    id               Int      @id
    firstName        String
    middleName       String
    lastName         String
    gender           String
    nationality      String
    state            String
    zone             String
    district         String
    kebele           String
    relationToOrphan String
    email            String
    job              String?
    age              Int
    orphans          Orphan[]
    @@map("guardian")
}

model Iga_property {
    id              Int      @id
    ownershipStatus String
    otherProperty   String?
    orphans         Orphan[]
    @@map("iga_property")
}

model Mother {
    id             Int       @id
    firstName      String
    middleName     String
    lastName       String
    dateOfBirth    DateTime
    phoneNumber    Int
    job            Int
    maritalStatus  String
    vitalStatus    String
    monthlyExpense Float
    motherjob      MotherJob @relation(fields: [job], references: [id])
    orphans        Orphan[]

    @@index([job], name: "job")
    @@map("mother")
}

model MotherJob {
    id              Int     @id
    currentJobTitle String?
    monthlyIncome   Float?
    mother          Mother
    @@map("motherjob")
}

model Orphan {
    id                        Int            @id
    firstName                 String
    fatherName                String
    grandFatherName           String
    greatGrandFatherName      String
    gender                    orphanGender
    placeOfBirth              String
    dateOfBirth               DateTime
    numberOfSponserdSiblings  Int
    physicalHealthStatus      String
    psychologicalHealthStatus String
    otherHealthIssues         String
    photoPortraitUrl          String
    photoLongUrl              String
    fatherId                  Int
    motherId                  Int
    guardianId                Int
    groupId                   Int
    siblingId                 Int
    IGA_PropertyId            Int
    educationId               Int
    siblings                  Sibling[]
    iga_property              Iga_property   @relation(fields: [IGA_PropertyId], references: [id])
    education                 Education      @relation(fields: [educationId], references: [id])
    father                    Father         @relation(fields: [fatherId], references: [id])
    groupoforphans            GroupOfOrphans @relation(fields: [groupId], references: [id])
    guardian                  Guardian       @relation(fields: [guardianId], references: [id])
    mother                    Mother         @relation(fields: [motherId], references: [id])

    @@index([IGA_PropertyId], name: "IGA_PropertyId")
    @@index([educationId], name: "educationId")
    @@index([fatherId], name: "fatherId")
    @@index([groupId], name: "groupId")
    @@index([guardianId], name: "guardianId")
    @@index([motherId], name: "motherId")
    @@map("orphan")
}

model Sibling {
    id            Int     @id
    fullName      String
    gender        String
    age           Int
    schoolGrade   String?
    job           String?
    maritalStatus String
    orphanId      Int
    orphan        Orphan  @relation(fields: [orphanId], references: [id])

    @@index([orphanId], name: "orphanId")
    @@map("sibling")
}

model Site {
    id             Int              @id
    siteName       String
    donationAmount Int
    addressId      String
    address        Address          @relation(fields: [addressId], references: [state])
    groupoforphans GroupOfOrphans[]
    socialworker   SocialWorker[]

    @@index([addressId], name: "addressId")
    @@map("site")
}

model SocialWorker {
    id             Int              @id
    fullName       String
    phoneNumber    Int
    email          String
    siteId         Int
    site           Site             @relation(fields: [siteId], references: [id])
    groupoforphans GroupOfOrphans[]

    @@index([siteId], name: "siteId")
    @@map("socialworker")
}

enum educationEnrollmentStatus {
    enrolled
    unenrolled
    droppedout
    @@map("education_enrollmentStatus")
}

enum educationTypeOfSchool {
    private
    public
    @@map("education_typeOfSchool")
}

enum orphanGender {
    M
    F
    @@map("orphan_gender")
}
