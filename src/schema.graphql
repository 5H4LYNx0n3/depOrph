type Query {
    orphan: Orphan!
}

type Mutation {
    createOrphan()
}

type Iga_property {
    id: ID!
    ownershipStaus: String!
    otherProperty: String
    orphan: Orphan!
}

type Education {
    id: ID!
    enrollmentStatus: educationEnrollmentStatus!
    schoolName: String
    typeOfSchool: educationTypeOfSchool
    grade: String
    reason: String
    hobbies: String
    orphans: [Orphan]!
}

type Father {
    id: ID!
    dateOfDeath: DateTime
    causeOfDeath: String
    job: String
    monthlyIncome: Int
    dateOfBirth: DateTime
    orphans: [Orphan!]!
}

type SocialWorker {
    id: ID!
    fullName: String!
    phoneNumber: Int!
    email: String!
    site: Site!
    groupOfOrphans: GroupOfOrphans!
}

type Address {
    state: Sibling!
    zone: String!
    district: String!
    kebele: String!
    site: Site! 
}

type Site {
    id: ID!
    siteName: String!
    donationAmount: Int!
    address: Address!
    groupsOfOrphans: [GroupOfOrphans!]!
    socialWorkers:   [SocialWorker!]!
}

type Donor {
    id: ID
    companyName: String
    typeOfsupport: String
    initialDonationAmount: Float
    initialReportPreparationDate: DateTime
    finalReportPreparationDate: DateTime
    initialDataCollectionDate: DateTime
    finalDataCollectionDate: DateTime
    reportDueDate: DateTime
    groupsOfOrphans: [GroupOfOrphans!]!
}

type GroupOfOrphans {
    id: ID!
    registrationDate: DateTime! 
    site: Site!
    socialWorker: [SocialWorker!]!
    orphans:    [Orphan!]!
    donor: Donor! 
}

type Guardian {
    id: ID!  
    firstName: String!
    middleName: String!
    lastName: String!
    gender: String!
    nationality: String!
    state: String!
    zone: String!
    district: String!
    kebele: String!
    relationToOrphan: String!
    email: String!
    job: String?
    age: Int
    orphans: [Orphan!]!
}

type MotherJob {
    id: ID!
    currentJobTitle: String
    monthlyIncome: String
    mother: Mother!
}

type Mother {
    id: ID!
    firstName: String!
    middleName: String!
    lastName: String!
    dateOfBirth: DateTime!
    phoneNumber: Int!
    job: Int!
    maritalStatus: String!
    vitalStatus: String!
    monthlyExpense: Float!
    motherjob: MotherJob!
    orphans: [Orphan!]!
}

type Sibling {
    id: ID!
    fullName: String!
    gender: String!
    age: Int!
    schoolGrade: String
    job: String
    orphan: Orphan!
}

type Orphan {
    id: ID!
    firstName: String!
    fatherName: String!
    grandFatherName: String!
    greatGrandFatherName: String!
    gender: orphan_gender!
    placeOfBirth: String!
    dateOfBirth: DateTime!
    numberOfSponserdSiblings: Int!
    physicalHealthStatus: String!
    psychologicalHealthStatus: String!
    otherHealthIssues: String!
    photoPortraitUrl: String!
    photoLongUrl: String!
    iga_property: Iga_property!
    education: Education!
    father: Father!
    groupoforphans: GroupOfOrphans!
    guardian: Guardian!
    mother: Mother!
    siblings: [Sibling!]!
}

enum orphanGender {
   M
   F 
}

enum educationEnrollmentStatus {
    enrolled
    unenrolled
    droppedout
}

enum educationTypeOfSchool {
    private
    public
}