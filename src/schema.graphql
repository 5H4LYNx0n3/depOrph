scalar DateTime

type Query {
  donor(id: ID!): Donor!
  education(id: ID!): Education!
  father(id: ID!): Father!
  guardian(id: ID!): Guardian!
  mother(id: ID!): Mother!
  motherJob(id: ID!): MotherJob!
  orphan(id: ID!): Orphan!
  socialWorker(id: ID!): SocialWorker!
  district(id: ID!): District!
  educationalRecord(id: ID!): EducationalRecord!
  financialRecord(id: ID!): FinancialRecord!
  healthRecord(id: ID!): HealthRecord!
  house_property(id: ID!): House_property!
  orphanPhotos(id: ID!): OrphanPhotos!
  peasantAssociation(id: ID!): PeasantAssociation!
  sponsorshipStatus(id: ID!): SponsorshipStatus!
  supportPlan(id: ID!): SupportPlan!

  allDonors(take: Int, filter: String, orderBy: DonorOrderByInput): [Donor]!
  allGuardians(
    take: Int
    filter: String
    orderBy: GuardianOrderByInput
  ): [Guardian]!
  allMothers(take: Int, filter: String, orderBy: MotherOrderByInput): [Mother]!
  allOrphans(take: Int, filter: String, orderBy: OrphanOrderByInput): [Orphan]!
  allSocialWorkers(
    take: Int
    filter: String
    orderBy: SocialWorkerOrderByInput
  ): [SocialWorker]!
  allDistricts(
    take: Int
    filter: String
    orderBy: DistrictOrderByInput
  ): [District]!
  allPeasantAssociations(
    take: Int
    filter: String
    orderBy: PeasantAssociationOrderByInput
  ): [PeasantAssociation]!
  allSupportPlans(
    take: Int
    filter: String
    orderBy: SupportPlanOrderByInput
  ): [SupportPlan]!
}

type Mutation {
  createDonor(
    companyName: String!
    nameInitials: String!
    orphans: [ID]
    peasantAssociations: [ID]
    supportPlans: [ID]
  ): Donor!

  updateDonor(
    id: ID!
    companyName: String
    nameInitials: String
    orphans: [ID]
    peasantAssociations: [ID]
    supportPlans: [ID]
  ): Donor!

  createEducation(
    enrollmentStatus: educationEnrollmentStatus!
    schoolName: String
    typeOfSchool: educationTypeOfSchool
    year: String
    level: educationLevel
    reason: String
    educationalRecords: [ID]
    orphan: [ID]
  ): Education!

  updateEducation(
    id: ID!
    enrollmentStatus: educationEnrollmentStatus
    schoolName: String
    typeOfSchool: educationTypeOfSchool
    year: String
    level: educationLevel
    reason: String
    educationalRecords: [ID]
    orphan: [ID]
  ): Education!

  createFather(
    dateOfDeath: DateTime!
    causeOfDeath: String!
    dateOfBirth: DateTime!
    deathCertificateUrl: String!
    orphans: [ID]
  ): Father!

  updateFather(
    id: ID!
    dateOfDeath: DateTime
    causeOfDeath: String
    dateOfBirth: DateTime
    deathCertificateUrl: String
    orphans: [ID]
  ): Father!

  createGuardian(
    firstName: String!
    middleName: String!
    lastName: String!
    gender: guardianGender!
    region: String!
    zone: String!
    district: String!
    peasantAssociation: String!
    relationToOrphan: guardianRelationToOrphan!
    mobile: String!
    POBox: String
    email: String!
    dateOfBirth: DateTime!
    guardianIDCardUrl: String!
    guardianConfirmationLetterUrl: String!
    orphans: [ID]
  ): Guardian!

  updateGuardian(
    id: ID!
    firstName: String
    middleName: String
    lastName: String
    gender: guardianGender
    state: String
    zone: String
    district: String
    kebele: String
    relationToOrphan: guardianRelationToOrphan
    mobile: String
    POBox: String
    email: String
    job: String
    dateOfBirth: DateTime
    monthlyExpense: Float
    guardianIDCardUrl: String
    guardianConfirmationLetterUrl: String
    orphans: [ID]
  ): Guardian!

  createMother(
    firstName: String!
    middleName: String!
    lastName: String!
    dateOfBirth: DateTime!
    dateOfDeath: DateTime
    causeOfDeath: String
    phoneNumber: String!
    maritalStatus: motherMaritalStatus
    vitalStatus: motherVitalStatus!
    monthlyExpense: Float!
    jobs: [ID]
    orphans: [ID]
  ): Mother!

  updateMother(
    id: ID!
    firstName: String
    middleName: String
    lastName: String
    dateOfBirth: DateTime
    dateOfDeath: DateTime
    causeOfDeath: String
    phoneNumber: String
    maritalStatus: motherMaritalStatus
    vitalStatus: motherVitalStatus
    monthlyExpense: Float
    jobs: [ID]
    orphans: [ID]
  ): Mother!

  createMotherJob(
    currentJobTitle: String
    monthlyIncome: Float
    initDate: DateTime
    termDate: DateTime
    motherId: ID
  ): MotherJob!

  updateMotherJob(
    id: ID!
    currentJobTitle: String
    monthlyIncome: Float
    initDate: DateTime
    termDate: DateTime
    motherId: ID
  ): MotherJob!

  createOrphan(
    firstName: String!
    fatherName: String!
    grandfatherName: String!
    gender: orphanGender!
    placeOfBirth: String!
    dateOfBirth: DateTime!
    spokenLanguages: String
    gradeAgeMismatchReason: String
    hobbies: String
    religion: orphanReligion
    idCardUrl: String
    passportUrl: String
    thankyouLetterUrl: String
    birthCertificateUrl: String!
    healthDescription: String!
    psychologicalStatus: orphanPsychologicalStatus
    accountNumber: String
    currentBalance: Float
    districtId: ID
    donorId: ID
    fatherId: ID
    guardianId: ID
    house_propertyId: ID
    motherId: ID
    peasantAssociationId: ID
    socialWorkerId: ID
    supportPlanId: ID
    educationId: ID
    photos: [ID]
    financialRecords: [ID]
    healthRecords: [ID]
    siblings: [ID]
    sponsorshipStatuses: [ID]
  ): Orphan!

  updateOrphan(
    id: ID!
    firstName: String
    fatherName: String
    grandfatherName: String
    gender: orphanGender
    placeOfBirth: String
    dateOfBirth: DateTime
    spokenLanguages: String
    gradeAgeMismatchReason: String
    hobbies: String
    religion: orphanReligion
    idCardUrl: String
    passportUrl: String
    thankyouLetterUrl: String
    birthCertificateUrl: String
    healthDescription: String
    psychologicalStatus: orphanPsychologicalStatus
    accountNumber: String
    currentBalance: Float
    districtId: ID
    donorId: ID
    fatherId: ID
    guardianId: ID
    house_propertyId: ID
    motherId: ID
    peasantAssociationId: ID
    socialWorkerId: ID
    supportPlanId: ID
    educationId: ID
    photos: [ID]
    financialRecords: [ID]
    healthRecords: [ID]
    # siblings: [ID]
    sponsorshipStatuses: [ID]
  ): Orphan!

  createSocialWorker(
    fullName: String!
    gender: socialWorkerGender
    phoneNumber: String!
    email: String!
    initDate: DateTime
    termDate: DateTime
    peasantAssociationId: ID
    orphans: [ID]
  ): SocialWorker!

  updateSocialWorker(
    id: ID!
    fullName: String
    gender: socialWorkerGender
    phoneNumber: String
    email: String
    initDate: DateTime
    termDate: DateTime
    peasantAssociationId: ID
    orphans: [ID]
  ): SocialWorker!

  createDistrict(
    districtName: String!
    region: String!
    zone: String!
    orphans: [ID]
    peasantAssociations: [ID]
  ): District!

  updateDistrict(
    id: ID!
    districtName: String
    region: String
    zone: String
    orphans: [ID]
    peasantAssociations: [ID]
  ): District!

  createEducationalRecord(
    yearDivision: ERYearDivision
    quarter: ERQuarter
    semester: ERSemester
    totalMark: Float
    numberOfSubjects: Int
    average: Float
    rank: Int
    reportCardUrl: String
    semesterGPA: Float
    cumulativeGPA: Float
    educationId: ID
  ): EducationalRecord!

  updateEducationalRecord(
    id: ID!
    yearDivision: ERYearDivision
    quarter: ERQuarter
    semester: ERSemester
    totalMark: Float
    numberOfSubjects: Int
    average: Float
    rank: Int
    reportCardUrl: String
    semesterGPA: Float
    cumulativeGPA: Float
    educationId: ID
  ): EducationalRecord!

  createFinancialRecord(
    transactionDate: DateTime
    transactionType: FRTransactionType
    amount: Float
    reason: FRReason
    specialCaseReason: String
    orphanId: ID
  ): FinancialRecord!

  updateFinancialRecord(
    id: ID!
    transactionDate: DateTime
    transactionType: FRTransactionType
    amount: Float
    reason: FRReason
    specialCaseReason: String
    orphanId: ID
  ): FinancialRecord!

  createHealthRecord(
    medicalCenterName: String
    dateOfExamination: DateTime
    diagnosis: String
    doctorsRecommendation: String
    restRecommended: String
    totalMedicalExpense: Float
    medicalCerificateUrl: String
    orphanId: ID
  ): HealthRecord!

  updateHealthRecord(
    id: ID!
    medicalCenterName: String
    dateOfExamination: DateTime
    diagnosis: String
    doctorsRecommendation: String
    restRecommended: String
    totalMedicalExpense: Float
    medicalCerificateUrl: String
    orphanId: ID
  ): HealthRecord!

  createHouse_property(
    housingSituation: String!
    otherProperty: String
    orphans: [ID]
  ): House_property!

  updateHouse_property(
    id: ID!
    housingSituation: String
    otherProperty: String
    orphans: [ID]
  ): House_property!

  createOrphanPhotos(
    photoPortraitUrl: String!
    photoLongUrl: String
    orphanId: ID
  ): OrphanPhotos!

  updateOrphanPhotos(
    id: ID!
    photoPortraitUrl: String
    photoLongUrl: String
    orphan: ID
  ): OrphanPhotos!

  createPeasantAssociation(
    registrationDate: DateTime!
    paName: String
    districtId: ID
    donorId: ID
    orphans: [ID]
    socialWorkers: [ID]
  ): PeasantAssociation!

  updatePeasantAssociation(
    id: ID!
    registrationDate: DateTime
    paName: String
    districtId: ID
    donorId: ID
    orphans: [ID]
    socialWorkers: [ID]
  ): PeasantAssociation!

  createSponsorshipStatus(
    status: orphanSponsorshipStatus
    date: DateTime!
    orphanId: ID
  ): SponsorshipStatus!

  updateSponsorshipStatus(
    id: ID!
    status: orphanSponsorshipStatus
    date: DateTime
    orphanId: ID
  ): SponsorshipStatus!

  createSupportPlan(
    totalFund_fc: Float
    currency: String
    totalFund_brr: Float
    adminFee_brr: Float
    netPayment_brr: Float
    initDate: DateTime
    termDate: DateTime
    donorId: ID
    orphans: [ID]
  ): SupportPlan!

  updateSupportPlan(
    id: ID!
    totalFund_fc: Float!
    currency: String
    totalFund_brr: Float
    adminFee_brr: Float
    netPayment_brr: Float
    initDate: DateTime
    termDate: DateTime
    donorId: ID
    orphans: [ID]
  ): SupportPlan!
}

type Donor {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  companyName: String!
  nameInitials: String!
  orphans: [Orphan]
  peasantAssociations: [PeasantAssociation]
  supportPlans: [SupportPlan]
}

type Education {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  enrollmentStatus: educationEnrollmentStatus!
  schoolName: String
  typeOfSchool: educationTypeOfSchool
  year: String
  level: educationLevel
  reason: String
  educationalRecords: [EducationalRecord]
  orphan: [Orphan]
}

type Father {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  dateOfDeath: DateTime!
  causeOfDeath: String!
  dateOfBirth: DateTime!
  deathCertificateUrl: String!
  orphans: [Orphan]
}

type Guardian {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  firstName: String!
  middleName: String!
  lastName: String!
  gender: guardianGender!
  relationToOrphan: guardianRelationToOrphan!
  phoneNumber: String!
  email: String!
  POBox: String
  dateOfBirth: DateTime!
  guardianIDCardUrl: String!
  guardianConfirmationLetterUrl: String!
  orphans: [Orphan]
}

type Mother {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  firstName: String!
  middleName: String!
  lastName: String!
  dateOfBirth: DateTime!
  dateOfDeath: DateTime
  causeOfDeath: String
  phoneNumber: String!
  maritalStatus: motherMaritalStatus!
  vitalStatus: motherVitalStatus!
  monthlyExpense: Float!
  jobs: [MotherJob]
  orphans: [Orphan]
}

type MotherJob {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  currentJobTitle: String
  monthlyIncome: String
  initDate: DateTime
  termDate: DateTime
  mother: Mother
}

type Orphan {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  firstName: String!
  fatherName: String!
  grandfatherName: String!
  gender: orphanGender!
  placeOfBirth: String!
  dateOfBirth: DateTime!
  spokenLanguages: String
  gradeAgeMismatchReason: String
  hobbies: String
  religion: orphanReligion
  idCardUrl: String
  passportUrl: String
  thankyouLetterUrl: String
  birthCertificateUrl: String!
  healthDescription: String!
  psychologicalStatus: orphanPsychologicalStatus
  accountNumber: String
  currentBalance: Float
  district: District
  donor: Donor
  education: Education
  father: Father
  guardian: Guardian
  house_property: House_property
  mother: Mother
  peasantAssociation: PeasantAssociation
  socialWorker: SocialWorker
  supportPlan: SupportPlan
  photos: [OrphanPhotos]
  financialRecords: [FinancialRecord]
  healthRecords: [HealthRecord]
  siblings: [Orphan]
  sponsorshipStatuses: [SponsorshipStatus]
}

type SocialWorker {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  fullName: String!
  gender: socialWorkerGender
  phoneNumber: String!
  email: String!
  initDate: DateTime
  termDate: DateTime
  peasantAssociation: PeasantAssociation
  orphans: [Orphan]
}

type District {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  districtName: String!
  region: String!
  zone: String!
  orphans: [Orphan]
  peasantAssociations: [PeasantAssociation]
}

type EducationalRecord {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  yearDivision: ERYearDivision
  quarter: ERQuarter
  semester: ERSemester
  totalMark: Float
  numberOfSubjects: Int
  average: Float
  rank: Int
  reportCardUrl: String
  semesterGPA: Float
  cumulativeGPA: Float
  education: Education
}

type FinancialRecord {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  transactionDate: DateTime
  transactionType: FRTransactionType
  amount: Float
  reason: FRReason
  specialCaseReason: String
  orphan: Orphan
}

type HealthRecord {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  medicalCenterName: String
  dateOfExamination: DateTime
  diagnosis: String
  doctorsRecommendation: String
  restRecommended: String
  totalMedicalExpense: Float
  medicalCerificateUrl: String
  orphan: Orphan
}

type House_property {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  housingSituation: String!
  otherProperty: String
  orphans: [Orphan]
}

type OrphanPhotos {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  photoPortraitUrl: String!
  photoLongUrl: String
  orphan: Orphan
}

type PeasantAssociation {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  registrationDate: DateTime!
  paName: String
  district: District
  donor: Donor
  orphans: [Orphan]
  socialWorkers: [SocialWorker]
}

type SponsorshipStatus {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  status: orphanSponsorshipStatus
  date: DateTime!
  orphan: Orphan
}

type SupportPlan {
  # TODO add individualFund_fc: Float, exchangeRate: Float & supportPeriod: Int!
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  totalFund_fc: Float! # Bulk donation for all in this plan
  # individualFund_fc: Float! # donation for each orphan
  currency: String
  totalFund_brr: Float
  adminFee_brr: Float
  netPayment_brr: Float # initially assi
  # intended period in months
  initDate: DateTime
  termDate: DateTime
  donor: Donor
  orphans: [Orphan]
}

enum orphanGender {
  M
  F
}

enum orphanReligion {
  Christianity
  Islam
  Buddhism
  Hinduism
  Judaism
}

enum orphanPsychologicalStatus {
  isolated
  stressed
  unsociable
  overlysociable
  normal
}

enum orphanSponsorshipStatus {
  inProgress
  active
  suspended
  graduated
}

enum socialWorkerGender {
  M
  F
}

enum guardianGender {
  M
  F
}

enum guardianRelationToOrphan {
  mother
  grandmother
  grandfather
  sister
  brother
  uncle
  aunt
  cousin
  niece
  nephew
}

enum motherMaritalStatus {
  married
  widow
  N_A
}

enum motherVitalStatus {
  alive
  passed
}

enum educationEnrollmentStatus {
  enrolled
  unenrolled
  droppedout
}

enum educationTypeOfSchool {
  private
  public
  N_A
}

enum educationLevel {
  preSchool
  gradeSchool
  underGraduate
  postGraduate
  N_A
}

enum ERYearDivision {
  semester
  quarter_term
}

enum ERQuarter {
  first
  second
  third
  fourth
}

enum ERSemester {
  first
  second
}

enum FRTransactionType {
  withdrawal
  deposit
  assign
  re_assign
}

enum FRReason {
  ASFC
  RSFC
  AAB
  AFB
  NPB
  EW
  HW
  NW
  SCW
}

enum Sort {
  asc
  desc
}

input DonorOrderByInput {
  created_at: Sort
}

input GuardianOrderByInput {
  created_at: Sort
}

input MotherOrderByInput {
  created_at: Sort
}

input OrphanOrderByInput {
  created_at: Sort
}

input SocialWorkerOrderByInput {
  created_at: Sort
}

input DistrictOrderByInput {
  created_at: Sort
}

input PeasantAssociationOrderByInput {
  created_at: Sort
}

input SupportPlanOrderByInput {
  created_at: Sort
}
