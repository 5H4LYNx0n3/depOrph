scalar DateTime

type Query {
  donor(id: ID!): Donor!
  education(id: ID!): Education!
  father(id: ID!): Father!
  guardian(id: ID!): Guardian!
  mother(id: ID!): Mother!
  motherJob(id: ID!): MotherJob!
  orphan(id: ID!): Orphan!
  socialWorker(id: ID!): SocialWorker!
  district(id: ID!): District!
  educationalRecord(id: ID!): EducationalRecord!
  financialRecord(id: ID!): FinancialRecord!
  health(id: ID!): Health!
  healthRecord(id: ID!): HealthRecord!
  house_property(id: ID!): House_property!
  orphanPhotos(id: ID!): OrphanPhotos!
  peasantAssociation(id: ID!): PeasantAssociation!
  sponsorshipStatus(id: ID!): SponsorshipStatus!
  supportPlan(id: ID!): SupportPlan!
  
  allDonors(take: Int, filter: String, orderBy: DonorOrderByInput): [Donor]!
  allGuardians(take: Int, filter: String, orderBy: GuardianOrderByInput): [Guardian]!
  allMothers(take: Int, filter: String, orderBy: MotherOrderByInput): [Mother]!
  allOrphans(take: Int, filter: String, orderBy: OrphanOrderByInput): [Orphan]!
  allSocialWorkers(take: Int, filter: String, orderBy: SocialWorkerOrderByInput): [SocialWorker]!
  allDistricts(take: Int, filter: String, orderBy: DistrictOrderByInput): [District]!
  allPeasantAssociations(take: Int, filter: String, orderBy: PeasantAssociationOrderByInput): [PeasantAssociation]!
  allSupportPlans(take: Int, filter: String, orderBy: SupportPlanOrderByInput): [SupportPlan]!
}

type Mutation {
  createOrphan(
    firstName: String!
    fatherName: String!
    grandFatherName: String!
    greatGrandFatherName: String!
    gender: orphanGender!
    placeOfBirth: String!
    dateOfBirth: DateTime!
    clan: String
    spokenLanguages: String
    numberOfSponserdSiblings: Int!
    physicalHealthStatus: String!
    psychologicalHealthStatus: String!
    otherHealthIssues: String
    hobbies: String
    sponsorshipStatus: orphanSponsorshipStatus
    sponsoredDate: DateTime
    iga_property: ID
    officialdocuments: ID
    education: ID
    father: ID
    guardian: ID
    mother: ID
    donor: ID
    site: ID
    sponsoredgroup: ID
    siblings: [ID]
  ): Orphan!

  updateOrphan(
    id: ID!
    firstName: String
    fatherName: String
    grandFatherName: String
    greatGrandFatherName: String
    gender: orphanGender
    placeOfBirth: String
    dateOfBirth: DateTime
    clan: String
    spokenLanguages: String
    numberOfSponserdSiblings: Int
    physicalHealthStatus: String
    psychologicalHealthStatus: String
    otherHealthIssues: String
    hobbies: String
    sponsorshipStatus: orphanSponsorshipStatus
    sponsoredDate: DateTime
  ): Orphan!

  createIga_property(
    ownershipStatus: String!
    otherProperty: String
    orphan: ID
  ): Iga_property!
  # updateIga_property() TODO after the patch is implemented
  createEducation(
    enrollmentStatus: educationEnrollmentStatus!
    schoolName: String
    typeOfSchool: educationTypeOfSchool
    year: String
    level: educationLevel
    reason: String
    orphan: ID
  ): Education!

  updateEducation(
    id: ID!
    enrollmentStatus: educationEnrollmentStatus
    schoolName: String
    typeOfSchool: educationTypeOfSchool
    year: String
    level: educationLevel
    reason: String
  ): Education!

  createFather(
    dateOfDeath: DateTime!
    causeOfDeath: String
    job: String
    monthlyIncome: Int
    dateOfBirth: DateTime!
    deathCertificateUrl: String!
    orphans: [ID]
  ): Father!

  updateFather(
    id: ID!
    dateOfDeath: DateTime
    causeOfDeath: String
    job: String
    monthlyIncome: Int
    dateOfBirth: DateTime
    deathCertificateUrl: String
    updated_at: DateTime
  ): Father!

  createSibling(
    fullName: String!
    gender: String!
    age: Int!
    schoolGrade: String
    job: String
    maritalStatus: String!
    orphan: ID
  ): Sibling!

  createGuardian(
    firstName: String!
    middleName: String!
    lastName: String!
    gender: guardianGender!
    nationality: String!
    state: String!
    zone: String!
    district: String!
    kebele: String!
    relationToOrphan: guardianRelationToOrphan!
    telephone: String
    mobile: String!
    POBox: String
    email: String!
    job: String
    dateOfBirth: DateTime!
    monthlyExpense: Float!
    guardianIDCardUrl: String!
    guardianConfirmationLetterUrl: String!
    orphans: [ID]
  ): Guardian!

  updateGuardian(
    id: ID!
    firstName: String
    middleName: String
    lastName: String
    gender: guardianGender
    nationality: String
    state: String
    zone: String
    district: String
    kebele: String
    relationToOrphan: guardianRelationToOrphan
    telephone: String
    mobile: String
    POBox: String
    email: String
    job: String
    dateOfBirth: DateTime
    monthlyExpense: Float
    guardianIDCardUrl: String
    guardianConfirmationLetterUrl: String
  ): Guardian!

  createMotherJob(
    currentJobTitle: String
    monthlyIncome: Float
    initDate: DateTime
    termDate: DateTime
    mother: ID
  ): MotherJob!

  createMother(
    firstName: String!
    middleName: String!
    lastName: String!
    dateOfBirth: DateTime!
    dateOfDeath: DateTime
    causeOfDeath: String
    phoneNumber: String!
    maritalStatus: motherMaritalStatus!
    vitalStatus: motherVitalStatus!
    monthlyExpense: Float!
    motherjob: [ID]
    orphans: [ID]
  ): Mother!

  updateMother(
    id: ID!
    firstName: String
    middleName: String
    lastName: String
    dateOfBirth: DateTime
    dateOfDeath: DateTime
    causeOfDeath: String
    phoneNumber: String
    maritalStatus: motherMaritalStatus
    vitalStatus: motherVitalStatus
    monthlyExpense: Float
  ): Mother!

  createOfficialDocuments(
    photoPortraitUrl: String!
    photoLongUrl: String!
    birthCertificateUrl: String!
    orphan: ID
  ): OfficialDocuments!

  updateOfficialDocuments(
    id: ID!
    photoPortraitUrl: String
    photoLongUrl: String
    birthCertificateUrl: String
  ): OfficialDocuments!

  createDonor(
    companyName: String
    initialReportPreparationDate: DateTime
    finalReportPreparationDate: DateTime
    initialDataCollectionDate: DateTime
    finalDataCollectionDate: DateTime
    reportDueDate: DateTime
    sponsoredgroups: [ID]
  ): Donor!

  createSocialWorker(
    fullName: String!
    phoneNumber: String!
    email: String!
    sponsoredgroup: ID
  ): SocialWorker!

  createSite(
    registrationDate: DateTime!
    siteName: String!
    state: String!
    zone: String!
    district: String!
    kebele: String
    orphans: [ID]
    sponsoredgroup: [ID]
  ): Site!

  createSponsoredGroup(
    sponsorshipDate: DateTime!
    donor: ID
    support: ID
    socialworkers: [ID]
    orphans: [ID]
  ): SponsoredGroup!

  createSupport(status: String!, sponsoredgroup: ID): Support!
}

type Donor {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  companyName: String
  nameInitials: String
  orphans: [Orphan]
  peasantAssociations: [PeasantAssociation]
  supportPlans: [SupportPlan]
}

type Education {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  enrollmentStatus: educationEnrollmentStatus!
  schoolName: String
  typeOfSchool: educationTypeOfSchool
  year: String
  level: educationLevel
  reason: String
  educationalRecords: [EducationalRecord]
  orphan: Orphan
}

type Father {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  dateOfDeath: DateTime
  causeOfDeath: String
  dateOfBirth: DateTime
  deathCertificateUrl: String!
  orphans: [Orphan]
}

type Guardian {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  firstName: String!
  middleName: String!
  lastName: String!
  gender: guardianGender!
  region: String!
  zone: String!
  district: String!
  peasantAssociation: String!
  relationToOrphan: guardianRelationToOrphan!
  mobile: String!
  email: String!
  POBox: String
  dateOfBirth: DateTime!
  guardianIDCardUrl: String!
  guardianConfirmationLetterUrl: String!
  orphans: [Orphan]
}

type Mother {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  firstName: String!
  middleName: String!
  lastName: String!
  dateOfBirth: DateTime!
  dateOfDeath: DateTime
  causeOfDeath: String
  phoneNumber: String!
  maritalStatus: motherMaritalStatus!
  vitalStatus: motherVitalStatus!
  monthlyExpense: Float!
  jobs: [MotherJob]
  orphans: [Orphan]
}

type MotherJob {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  currentJobTitle: String
  monthlyIncome: String
  initDate: DateTime # TODO:DONE add to mutation and resolvers and UI
  termDate: DateTime # TODO:DONE add to mutation and resolvers and UI
  mother: Mother
}

type Orphan {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  firstName: String!
  fatherName: String!
  grandFatherName: String!
  gender: orphanGender!
  placeOfBirth: String!
  dateOfBirth: DateTime!
  spokenLanguages: String
  gradeAgeMismatchReason: String
  hobbies: String
  religion: orphanReligion
  idCardUrl: String
  passportUrl: String
  thankyouLetterUrl: String
  birthCertificateUrl: String!
  psychologicalStatus: orphanPsychologicalStatus
  accountNumber: String!
  currentBalance: Float
  district: District
  photos: OrphanPhotos
  donor: Donor
  education: Education
  father: Father
  guardian: Guardian
  house_property: House_property
  mother: Mother
  peasantAssociation: PeasantAssociation
  sibling: Orphan
  socialWorker: SocialWorker
  supportPlan: SupportPlan
  financialRecords: [FinancialRecord]
  health: Health
  siblings: [Orphan]
  sponsorshipStatuses: [SponsorshipStatus]
}

type SocialWorker {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  fullName: String!
  gender: socialWorkerGender
  phoneNumber: String!
  email: String!
  initDate: DateTime
  termDate: DateTime
  peasantAssociation: PeasantAssociation
  orphans: [Orphan]
}

type District {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  districtName: String!
  region: String!
  zone: String!
  orphans: [Orphan]
  peasantAssociations: [PeasantAssociation]
}

type EducationalRecord {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  yearDivision: ERYearDivision
  quarter: ERQuarter
  semester: ERSemester
  totalMark: Float
  numberOfSubjects: Int
  average: Float
  rank: Int
  reportCardUrl: String
  semesterGPA: Float
  cumulativeGPA: Float
  education: Education
}

type FinancialRecord {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  transactionDate: DateTime
  transactionType: FRTransactionType
  amount: Float
  reason: FRReason
  specialCaseReason: String
  orphan: Orphan
}

type Health {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  healthDescription: String
  orphan: Orphan
  healthRecords: [HealthRecord]
}

type HealthRecord {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  medicalCenterName: String
  dateOfExamination: DateTime
  diagnosis: String
  doctorsRecommendation: String
  restRecommended: String
  totalMedicalExpense: Float
  medicalCerificateUrl: String
  health: Health
}

type House_property {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  housingSituation: String!
  otherProperty: String
  orphan: [Orphan]
}

type OrphanPhotos {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  photoPortraitUrl: String!
  photoLongUrl: String!
  orphan: Orphan
}

type PeasantAssociation {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  registrationDate: DateTime!
  paName: String
  district: District
  donor: Donor
  orphans: [Orphan]
  socialworkers: [SocialWorker]
}

type SponsorshipStatus {
  status: orphanSponsorshipStatus
  date: DateTime
  orphan: Orphan
}

type SupportPlan {
  id: ID!
  created_at: DateTime
  updated_at: DateTime
  totalFund_fc: Float!
  currency: String
  totalFund_brr: Float
  adminFee_brr: Float
  netPayment_brr: Float
  initDate: DateTime
  termDate: DateTime
  donor: Donor
  orphans: [Orphan]
}

enum orphanGender {
  M
  F
}

enum orphanReligion {
  Christianity
  Islam
  Buddhism
  Hinduism
  Judaism
}

enum orphanPsychologicalStatus {
  isolated
  stressed
  unsociable
  overlysociable
  normal
}

enum orphanSponsorshipStatus {
  inProgress
  active
  suspended
  graduated
}

enum socialWorkerGender {
  M
  F
}

enum guardianGender {
  M
  F
}

enum guardianRelationToOrphan {
  mother
  grandmother
  grandfather
  sister
  brother
  uncle
  aunt
  cousin
  niece
  nephew
}

enum motherMaritalStatus {
  remarried
  widow
  N_A
}

enum motherVitalStatus {
  alive
  passed
}

enum educationEnrollmentStatus {
  enrolled
  unenrolled
  droppedout
}

enum educationTypeOfSchool {
  private
  public
  N_A
}

enum educationLevel {
  preSchool
  gradeSchool
  underGraduate
  postGraduate
  N_A
}

enum ERYearDivision {
  semester
  quarter_term
}

enum ERQuarter {
  first
  second
  third
  fourth
}

enum ERSemester {
  first
  second
}

enum Sort {
  asc
  desc
}

input OrphanOrderByInput {
  created_at: Sort
}
